(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{423:function(t,e,a){"use strict";a.r(e);var r=a(25),v=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"小程序分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小程序分析"}},[t._v("#")]),t._v(" 小程序分析")]),t._v(" "),a("h2",{attrs:{id:"小程序与普通网页开发的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小程序与普通网页开发的区别"}},[t._v("#")]),t._v(" 小程序与普通网页开发的区别")]),t._v(" "),a("p",[t._v("小程序的主要开发语言是 JavaScript ，小程序的开发同普通的网页开发相比有很大的相似性。对于前端开发者而言，从网页开发迁移到小程序的开发成本并不高，但是二者还是有些许区别的。")]),t._v(" "),a("p",[t._v("网页开发渲染线程和脚本线程是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应，而在小程序中，二者是分开的，分别运行在不同的线程中。网页开发者可以使用到各种浏览器暴露出来的 DOM API，进行 DOM 选中和操作。而如上文所述，小程序的逻辑层和渲染层是分开的，逻辑层运行在 JSCore 中，并没有一个完整浏览器对象，因而缺少相关的DOM API和BOM API。这一区别导致了前端开发非常熟悉的一些库，例如 jQuery、 Zepto 等，在小程序中是无法运行的。同时 JSCore 的环境同 NodeJS 环境也是不尽相同，所以一些 NPM 的包在小程序中也是无法运行的。")]),t._v(" "),a("p",[t._v("网页开发者需要面对的环境是各式各样的浏览器，PC 端需要面对 IE、Chrome、QQ浏览器等，在移动端需要面对Safari、Chrome以及 iOS、Android 系统中的各式 WebView 。而小程序开发过程中需要面对的是两大操作系统 iOS 和 Android 的微信客户端，以及用于辅助开发的小程序开发者工具，小程序中三大运行环境也是有所区别的")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("运行环境")])]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("逻辑层")])]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("渲染层")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iOS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JavaScriptCore")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("WKWebView")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("安卓")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("V8")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("chromium定制内核")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("小程序开发者工具")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NWJS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Chrome WebView")])])])]),t._v(" "),a("p",[t._v("网页开发者在开发网页的时候，只需要使用到浏览器，并且搭配上一些辅助工具或者编辑器即可。小程序的开发则有所不同，需要经过申请小程序帐号、安装小程序开发者工具、配置项目等等过程方可完成。")]),t._v(" "),a("h2",{attrs:{id:"文章分享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文章分享"}},[t._v("#")]),t._v(" 文章分享")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://chris118.github.io/2018/04/10/2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("小程序架构"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://eux.baidu.com/blog/fe/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("微信小程序架构原理"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://zhaomenghuan.js.org/blog/what-is-emp.html#%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于vuejs的小程序引擎底层框架实现"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://zhaomenghuan.js.org/note/miniprogram/awesome-miniprogram.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("小程序原理等文章"),a("OutboundLink")],1)])])]),t._v(" "),a("h2",{attrs:{id:"基本架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本架构"}},[t._v("#")]),t._v(" 基本架构")]),t._v(" "),a("p",[t._v("小程序主要分为"),a("strong",[t._v("逻辑层")]),t._v("和"),a("strong",[t._v("视图层")]),t._v("，还有就是他们的原生部分")]),t._v(" "),a("p",[a("img",{attrs:{src:"/sourceCode/applets/basicStructure.png",alt:"basicStructure"}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("视图层主要负责页面的渲染")])]),t._v(" "),a("li",[a("p",[t._v("逻辑层负责js的执行。")])])]),t._v(" "),a("p",[t._v("他们之间通过event和data来通信。通信是有微信客户端（native）做的一层中转；")]),t._v(" "),a("p",[t._v("然后也可以通过jsBridge来调用原生的api，比如什么相机、扫码等功能。")]),t._v(" "),a("p",[t._v("这个视图层，最后我们打包出来的代码，就是html和css，在这里面运行，视图层目前使用 WebView 作为渲染载体。")]),t._v(" "),a("p",[t._v("逻辑层是由独立的 JsCore 作为js的运行环境,所以他和浏览器不一样，只有一些js对应的方法，不能直接操作dom和获取dom，中间都需要通信这一层中转，在架构上，WebView 和 JavascriptCore 都是独立的模块，并不具备数据直接共享的通道。")]),t._v(" "),a("p",[t._v("当前，视图层和逻辑层的数据传输，实际上通过两边提供的 "),a("code",[t._v("evaluateJavascript")]),t._v(" 所实现。")]),t._v(" "),a("p",[t._v("即用户传输的数据，需要将其转换为字符串形式传递，同时把转换后的数据内容拼接成一份 JS 脚本，再通过执行 JS 脚本的形式传递到两边独立环境。")]),t._v(" "),a("p",[t._v("而 "),a("code",[t._v("evaluateJavascript")]),t._v(" 的执行会受很多方面的影响，数据到达视图层并不是实时的。")]),t._v(" "),a("p",[t._v("由于这之间他们是彼此独立的，是基于消息驱动来渲染的，所以不会阻塞页面；")]),t._v(" "),a("p",[t._v("所以这就不会造成渲染的阻塞，我的渲染不会影响你的js逻辑，js的执行也不会柱塞渲染的过程；")]),t._v(" "),a("p",[t._v("比如你在发送一些请求的时候，这种一般是经由native转发；")]),t._v(" "),a("p",[a("img",{attrs:{src:"/sourceCode/applets/structure.png",alt:"structure"}})]),t._v(" "),a("h2",{attrs:{id:"未完待续"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未完待续"}},[t._v("#")]),t._v(" 未完待续")])])}),[],!1,null,null,null);e.default=v.exports}}]);